/* *	File:		DZInput.c * *	Contents:	Handles input devices. * *	Copyright © 1996 Apple Computer, Inc. */#include <TextUtils.h>#include <stdio.h>#include "Sprocket Input.h"enum {	kDeviceList_COUNT		= 200};enum {	kIconSuite_Shoot = 10000,	kIconSuite_Pass,	kIconSuite_Horizontal,	kIconSuite_Vertical};enum{	kInputSprocketSavedSet = 12345};Boolean					gInputActive = false;ISpElementReference		gInputElement[kElement_COUNT];ISpElementListReference	gInputEventList = nil;static ISpNeed needs[kElement_COUNT] =	{		{ "\pPlayer 1 Shoot",		kIconSuite_Shoot,		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 1 Pass",		kIconSuite_Pass, 		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 1",				kIconSuite_Vertical,	0,	kISpElementKind_DPad,		kISpElementLabel_PadMove, 0	},//		{ "\pPlayer 1 Horizontal",	kIconSuite_Horizontal,	0,	kISpElementKind_Axis,		kISpElementLabel_XAxis,	 0	},//		{ "\pPlayer 1 Vertical",	kIconSuite_Vertical,	0,	kISpElementKind_Axis,		kISpElementLabel_YAxis,	 0	},		{ "\pPlayer 1 Menu",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},				{ "\pPlayer 2 Shoot",		kIconSuite_Shoot,		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 2 Pass",		kIconSuite_Pass, 		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 2",				kIconSuite_Vertical,	0,	kISpElementKind_DPad,		kISpElementLabel_PadMove, 0	},//		{ "\pPlayer 2 Horizontal",	kIconSuite_Horizontal,	0,	kISpElementKind_Axis,		kISpElementLabel_XAxis,	 0	},//		{ "\pPlayer 2 Vertical",	kIconSuite_Vertical,	0,	kISpElementKind_Axis,		kISpElementLabel_YAxis,	 0	},		{ "\pPlayer 2 Menu",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},#if FOURPLAYERS		{ "\pPlayer 3 Shoot",		kIconSuite_Shoot,		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 3 Pass",		kIconSuite_Pass, 		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 3",				kIconSuite_Vertical,	0,	kISpElementKind_DPad,		kISpElementLabel_PadMove, 0	},//		{ "\pPlayer 3 Horizontal",	kIconSuite_Horizontal,	0,	kISpElementKind_Axis,		kISpElementLabel_XAxis,	 0	},//		{ "\pPlayer 3 Vertical",	kIconSuite_Vertical,	0,	kISpElementKind_Axis,		kISpElementLabel_YAxis,	 0	},		{ "\pPlayer 3 Menu",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlayer 4 Shoot",		kIconSuite_Shoot,		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 4 Pass",		kIconSuite_Pass, 		0,	kISpElementKind_Button,		kISpElementLabel_Fire,	 0	},		{ "\pPlayer 4",				kIconSuite_Vertical,	0,	kISpElementKind_DPad,		kISpElementLabel_PadMove, 0	},//		{ "\pPlayer 4 Horizontal",	kIconSuite_Horizontal,	0,	kISpElementKind_Axis,		kISpElementLabel_XAxis,	 0	},//		{ "\pPlayer 4 Vertical",	kIconSuite_Vertical,	0,	kISpElementKind_Axis,		kISpElementLabel_YAxis,	 0	},		{ "\pPlayer 4 Menu",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},#endif		{ "\pView Horizontal",		kIconSuite_Horizontal,	0,	kISpElementKind_Axis,		kISpElementLabel_XAxis,	 0	},		{ "\pView Vertical",		kIconSuite_Vertical,	0,	kISpElementKind_Axis,		kISpElementLabel_YAxis,	 0	},				{ "\pFar Camera",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlan Camera",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pGoal Line Camera",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pManual Camera",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlayer Camera",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pWire Camera",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pReferee Camera",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pISO Camera",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPitch Type",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pLines",				kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pSky",					kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlayer Shadows",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlayer Detail",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pScanner",				kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pVideo Wall",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlayer Camera +",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pPlayer Camera -",		kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},#if USERAVEENGINE==YES		{ "\pUnused",				kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pUnused",				kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},#else		{ "\pScreen Size",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pScreen Resolution",	kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},#endif		{ "\pPause Game",			kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Select, 0	},		{ "\pStop",					kIconSuite_Vertical,	0,	kISpElementKind_Button,		kISpElementLabel_Start,	 0	},	};static void EnableDeviceClass(OSType deviceClass, Boolean enable){OSStatus err;UInt32 count;ISpDeviceReference deviceList[kDeviceList_COUNT];		// NOTE: This is not the correct way to handle the list count thing.  We	// should actually call once with NULL for the device list, malloc a list of	// that size, and call again.		err = ISpDevices_ExtractByClass(			deviceClass,			kDeviceList_COUNT,			&count,			deviceList);		if (err)	{		return;	}		if (count > kDeviceList_COUNT)	{		count = kDeviceList_COUNT;	}		if (enable)	{		err = ISpDevices_Activate(				count,				deviceList);			}	else	{		err = ISpDevices_Deactivate(				count,				deviceList);	}}/* ============================================================================= *		Input_Init (external) * *	Initializes the Input stuff. * ========================================================================== */void Input_Init(	void){UInt32						count;ISpDeviceReference			deviceList[kDeviceList_COUNT];OSStatus err;		EnableDeviceClass(kISpDeviceClass_Mouse, true);	EnableDeviceClass(kISpDeviceClass_Keyboard, true);	EnableDeviceClass(kISpDeviceClass_Joystick, true);		// Set our virtual elements  	err = ISpElement_NewVirtualFromNeeds(  			kElement_COUNT,  			needs,  			gInputElement,  			0);	if( err != noErr)		printf("Failed In NewVirtual\n");			// Autoconfigure our virtual elements based on our needs	err = ISpInit(kElement_COUNT,			needs,			gInputElement,			'ACTU',			'0001',  // could use this as versioning on the needs			0,			kInputSprocketSavedSet,			0);	if( err != noErr)		printf("Failed In ISpInit %d\n", err);  	  	// Build our list of elements, which we'll poll for events	err = ISpElementList_New(			0,			NULL,			&gInputEventList,			0);	if( err != noErr)		printf("Failed In ISpElementList_New\n");		// Add the virtual elements one at a time so we can assign a refcon	for(int itr = 0; itr < kElement_COUNT; itr++)		err = ISpElementList_AddElements(gInputEventList, itr, 1, &gInputElement[itr]);			// Start off suspended (because the game is stopped)	ISpSuspend();}/* ============================================================================= *		Input_Exit (external) * *	Prepares for exit. * ========================================================================== */void Input_Exit(	void){		if (gInputEventList != NULL)	{		ISpElementList_Dispose(gInputEventList);		gInputEventList = NULL;	}	 	ISpStop(); 		ISpElement_DisposeVirtual(kElement_COUNT, gInputElement);}/* ============================================================================= *		Input_Configure (external) * *	Show the configuration dialog. * ========================================================================== */void Input_Configure(	void){ 	ISpConfigure(NULL);}/* ============================================================================= *		Input_Activate (external) * *	On deactivation, we suspend InputSprocket.  On activation we resume it and *	flush the event queue.  We only allow activation when the game is in "Play" *	state. * ========================================================================== */void Input_Activate(	Boolean				inActivate){	if (gInputActive != inActivate)	{		gInputActive = inActivate;			 	if (gInputActive)	 	{	 			 		ISpResume();	 		ISpElementList_Flush(gInputEventList);	 	}	 	else	 	{	 		ISpSuspend();	 	}	}}