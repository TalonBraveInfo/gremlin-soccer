#include <stdarg.h>
#include "Mac Vars.h"
#include "Debugging.h"

#if DEBUGGING==ON

#undef EXTERN
#define EXTERN extern
#include "Blitter.h"

void Verbose(char *format,...)
{
FILE *fp;
va_list arglist;

	va_start(arglist,format);

	if((fp=fopen("Actua.log","at+")))
		{
		vfprintf(fp,format,arglist);
		fclose(fp);
		}
	else
		vprintf(format,arglist);
	va_end(arglist);
}

static unsigned long Timers[4];

unsigned char CharacterMap[] = {
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x10,0x10,0x10,0x10,0x10,0x00,0x10,0x00,0x00,
	0x00,0x28,0x28,0x50,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x00,0x00,
	0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,
	0x00,0x60,0x64,0x08,0x10,0x20,0x4C,0x0C,0x00,0x00,
	0x00,0x38,0x44,0x64,0x38,0x4C,0x44,0x3A,0x00,0x00,
	0x00,0x10,0x10,0x20,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x10,0x20,0x40,0x40,0x40,0x20,0x10,0x00,0x00,
	0x00,0x10,0x08,0x04,0x04,0x04,0x08,0x10,0x00,0x00,
	0x00,0x10,0x54,0x38,0x7C,0x38,0x54,0x10,0x00,0x00,
	0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x40,0x00,
	0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,
	0x00,0x00,0x04,0x08,0x10,0x20,0x40,0x00,0x00,0x00,
	0x00,0x38,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00,
	0x00,0x10,0x30,0x10,0x10,0x10,0x10,0x38,0x00,0x00,
	0x00,0x38,0x44,0x04,0x08,0x10,0x20,0x7C,0x00,0x00,
	0x00,0x38,0x44,0x04,0x18,0x04,0x44,0x38,0x00,0x00,
	0x00,0x08,0x18,0x28,0x48,0x7C,0x08,0x08,0x00,0x00,
	0x00,0x7C,0x40,0x40,0x78,0x04,0x44,0x38,0x00,0x00,
	0x00,0x04,0x08,0x10,0x38,0x44,0x44,0x38,0x00,0x00,
	0x00,0x7C,0x04,0x08,0x10,0x20,0x40,0x40,0x00,0x00,
	0x00,0x38,0x44,0x44,0x38,0x44,0x44,0x38,0x00,0x00,
	0x00,0x38,0x44,0x44,0x38,0x10,0x20,0x40,0x00,0x00,
	0x00,0x00,0x00,0x10,0x00,0x10,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x10,0x00,0x00,0x10,0x10,0x20,0x00,
	0x00,0x08,0x10,0x20,0x7F,0x20,0x10,0x08,0x00,0x00,
	0x00,0x00,0x00,0x7C,0x00,0x7C,0x00,0x00,0x00,0x00,
	0x00,0x20,0x10,0x08,0xFC,0x08,0x10,0x20,0x00,0x00,
	0x00,0x38,0x44,0x04,0x08,0x10,0x00,0x10,0x00,0x00,
	0x00,0x38,0x44,0x5C,0x64,0x64,0x5C,0x40,0x00,0x00,
	0x00,0x10,0x28,0x44,0x44,0x7C,0x44,0x44,0x00,0x00,
	0x00,0x78,0x44,0x44,0x78,0x44,0x44,0x78,0x00,0x00,
	0x00,0x38,0x44,0x40,0x40,0x40,0x44,0x38,0x00,0x00,
	0x00,0x70,0x48,0x44,0x44,0x44,0x48,0x70,0x00,0x00,
	0x00,0x7C,0x40,0x40,0x78,0x40,0x40,0x7C,0x00,0x00,
	0x00,0x7C,0x40,0x40,0x78,0x40,0x40,0x40,0x00,0x00,
	0x00,0x38,0x44,0x40,0x40,0x4C,0x44,0x38,0x00,0x00,
	0x00,0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0x00,0x00,
	0x00,0x38,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00,
	0x00,0x7C,0x10,0x10,0x10,0x10,0x50,0x20,0x00,0x00,
	0x00,0x44,0x48,0x50,0x60,0x50,0x48,0x44,0x00,0x00,
	0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x7C,0x00,0x00,
	0x00,0x44,0x6C,0x54,0x44,0x44,0x44,0x44,0x00,0x00,
	0x00,0x44,0x44,0x64,0x54,0x4C,0x44,0x44,0x00,0x00,
	0x00,0x38,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00,
	0x00,0x78,0x44,0x44,0x78,0x40,0x40,0x40,0x00,0x00,
	0x00,0x38,0x44,0x44,0x44,0x44,0x4C,0x3C,0x02,0x00,
	0x00,0x78,0x44,0x44,0x78,0x50,0x48,0x44,0x00,0x00,
	0x00,0x38,0x44,0x20,0x10,0x08,0x44,0x38,0x00,0x00,
	0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
	0x00,0x44,0x44,0x44,0x44,0x44,0x44,0x38,0x00,0x00,
	0x00,0x44,0x44,0x44,0x44,0x44,0x28,0x10,0x00,0x00,
	0x00,0x44,0x44,0x44,0x44,0x54,0x6C,0x44,0x00,0x00,
	0x00,0x44,0x28,0x10,0x10,0x10,0x28,0x44,0x00,0x00,
	0x00,0x44,0x44,0x28,0x10,0x10,0x10,0x10,0x00,0x00,
	0x00,0x7C,0x04,0x08,0x10,0x20,0x40,0x7C,0x00,0x00,
	0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x38,0x00,0x00,
	0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x00,0x00,0x00,
	0x00,0x38,0x08,0x08,0x08,0x08,0x08,0x38,0x00,0x00,
	0x00,0x10,0x38,0x54,0x10,0x10,0x10,0x10,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x00,0x00
				};

static unsigned char *DumpScreen;
static char line[64];

void DumpLong(long offset, unsigned long var)
{
	DumpScreen = (unsigned char *)(gScreenAddr+(offset*gScreenRowBytes));
	sprintf(line,"%04lX %04lX", var>>16, var &0xffff); PrintString(line);
}

void DumpLong2(long offset, unsigned long var)
{
	DumpScreen = (unsigned char *)(gScreenAddr+(offset*gScreenRowBytes))+48;
	sprintf(line,"%04lX %04lX", var>>16, var &0xffff); PrintString(line);
}

void DumpTime(long offset)
{
	DumpScreen = (unsigned char *)(gScreenAddr+(offset*gScreenRowBytes));
	sprintf(line,"%08lX",Timers[2]-Timers[0]); PrintString(line);
	sprintf(line,"%08lX",Timers[3]-Timers[1]); PrintString(line);
}

void PrintString(char *str)
{
	while(*str)
	  {
	  PrintChar(*str++);
#if USERAVEENGINE==YES
	  DumpScreen += 8;
#endif
	  DumpScreen += 8;
	  }
}

void PrintChar(short chr)
{
short a,b;
unsigned char c;
unsigned char *scr= DumpScreen;

	chr = (chr-32)*10;
	for (a=0; a<10; a++)
	  {
	  c = CharacterMap[chr++];
	  for(b=0; b<8; b++)
	    {
#if USERAVEENGINE==YES
	    scr[b*2] = scr[b*2+1] = c&0x80 ? 255:0;
#else
	    scr[b] = c&0x80 ? 255:0;
#endif
	    c<<=1;
	    }
	  scr += gScreenRowBytes;
	  }
}


asm void ReadTimerStart()
{
	machine 603
	
@l1
	mftbu	r3
	mftb	r4
	mftbu	r5
	cmpw	r3,r5
	bne	@l1
	lwz	r5, Timers
	stw	r3, 0(r5)
	stw	r4, 4(r5)
	blr
}

asm void ReadTimerEnd()
{
	machine 603
	
@l1
	mftbu	r3
	mftb	r4
	mftbu	r5
	cmpw	r3,r5
	bne	@l1
	lwz	r5, Timers
	stw	r3, 8(r5)
	stw	r4, 12(r5)
	blr
}
#endif
