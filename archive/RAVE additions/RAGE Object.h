#include "Rave.h"/*****************************************************************	Some standard constants that define the limitations of our	objects and their polygons. *****************************************************************/const int kMaxVerticesPerObject	 = 32;const int kMaxVerticesPerPolygon = 6;const int kMaxPolygonsPerObject  = 20;const int kMaxVerticesPerClippedPolygon = kMaxVerticesPerPolygon*2;const int kMaxPolygonsDrawnPerFrame = 300;/*****************************************************************	Data Structures for maintaining and loading objects *****************************************************************/typedef struct Position Position;typedef struct ClippedPolygon ClippedPolygon;typedef struct RawPolygon RawPolygon;typedef struct RawObject RawObject;typedef struct RawObjectData RawObjectData;// Position is used to locate a particular object and can also be used// to specify a camera location.struct Position{	// location in worldspace	float			x;	float			y;	float			z;	// orientation	long			roll;   // in degrees 0-359 	long			pitch;  // in degrees 0-359	long			yaw;    // in degrees 0-359};struct ClippedPolygon{	long			numVertices;	TQAVGouraud		verts[kMaxVerticesPerClippedPolygon];};struct RawPolygon{	long	numIndexes;	long	indexes[kMaxVerticesPerPolygon];};struct RawObject{	// Used to maintain a linked list	RawObject		*previous;	RawObject		*next;		Position		location;	// base information	long			numVertices;	long			numPolygons;		TQAVGouraud		base[kMaxVerticesPerObject];	RawPolygon		polygons[kMaxPolygonsPerObject];	TQAVGouraud		converted[kMaxVerticesPerObject];	};// Used to load from disk.struct RawObjectData{	// base information	long			numVertices;	long			numPolygons;		TQAVGouraud		base[kMaxVerticesPerObject];	RawPolygon		polygons[kMaxPolygonsPerObject];};/*****************************************************************	All of the routines to work on our data structues -- essentially	the complete 3D engine that calls RAVE.	1. Set up object transformations2. Transform each object3. Convert object to world coordinates4. Clip polygon list against z extents5. project each polygon6. clip polygon against x and y coordinates7. trivially reject polygons8. sort the polygon list with z coordinates9. sort the polygon list with painter's algorithm10. Draw the polygons  *****************************************************************//*****************************************************************	Routines to Manipulate Cameras*****************************************************************/extern void SetCameraLocation (Position *inPosition);extern void GetCameraLocation (Position *outPosition);extern void CalculateCameraTransform (void);extern void SetZExtents (float hither, float yon);extern void SetClipRect (TQARect *clip);/*****************************************************************	Routines to Manipulate Objects*****************************************************************/extern void TransformObjectToWorld (RawObject *object);extern void TransformObjectToCamera (RawObject *object);extern Boolean ClipObjectToZ (RawObject *object); // returns true if the is between the planesextern void ProjectObject (RawObject *object);extern void DrawObject (RawObject *object, TQADrawContext *theContext);/*****************************************************************	Routines to Manipulate Polygons*****************************************************************/extern Boolean ClipPolygon (ClippedPolygon *poly);  // returns true if the polygon should be drawn