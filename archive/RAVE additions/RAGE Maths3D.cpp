/****************************************************************************Math.cp****************************************************************************/#include "RAGE Maths3D.h"void SetEmptyMatrix (Matrix4x3 *m){	m->value[0][0] = m->value[0][1] = m->value[0][2] = 	m->value[1][0] = m->value[1][1] = m->value[1][2] = 	m->value[2][0] = m->value[2][1] = m->value[2][2] = 	m->value[3][0] = m->value[3][1] = m->value[3][2] = 0.0;}void SetIdentityMatrix (Matrix4x3 *m){	m->value[0][1] = m->value[0][2] = 	m->value[1][0] = m->value[1][2] = 	m->value[2][0] = m->value[2][1] = 	m->value[3][0] = m->value[3][1] = m->value[3][2] = 0.0;		m->value[0][0] = m->value[1][1] = m->value[2][2] = 1.0;}void SetTranslationMatrix (Matrix4x3 *m, float dx, float dy, float dz){	m->value[0][1] = m->value[0][2] = 	m->value[1][0] = m->value[1][2] = 	m->value[2][0] = m->value[2][1] =  0.0;		m->value[0][0] = m->value[1][1] = m->value[2][2] = 1.0;		m->value[3][0] = dx;	m->value[3][1] = dy;	m->value[3][2] = dz;}void MultiplyMatrixToMatrix (const Matrix4x3 *src, const Matrix4x3 *times, Matrix4x3 *dest){	dest->value[0][0] = src->value[0][0]*times->value[0][0] + src->value[0][1]*times->value[1][0] + src->value[0][2]*times->value[2][0];	dest->value[0][1] = src->value[0][0]*times->value[0][1] + src->value[0][1]*times->value[1][1] + src->value[0][2]*times->value[2][1];	dest->value[0][2] = src->value[0][0]*times->value[0][2] + src->value[0][1]*times->value[1][2] + src->value[0][2]*times->value[2][2];		dest->value[1][0] = src->value[1][0]*times->value[0][0] + src->value[1][1]*times->value[1][0] + src->value[1][2]*times->value[2][0];	dest->value[1][1] = src->value[1][0]*times->value[0][1] + src->value[1][1]*times->value[1][1] + src->value[1][2]*times->value[2][1];	dest->value[1][2] = src->value[1][0]*times->value[0][2] + src->value[1][1]*times->value[1][2] + src->value[1][2]*times->value[2][2];		dest->value[2][0] = src->value[2][0]*times->value[0][0] + src->value[2][1]*times->value[1][0] + src->value[2][2]*times->value[2][0];	dest->value[2][1] = src->value[2][0]*times->value[0][1] + src->value[2][1]*times->value[1][1] + src->value[2][2]*times->value[2][1];	dest->value[2][2] = src->value[2][0]*times->value[0][2] + src->value[2][1]*times->value[1][2] + src->value[2][2]*times->value[2][2];	 	dest->value[3][0] = src->value[3][0]*times->value[0][0] + src->value[3][1]*times->value[1][0] + src->value[3][2]*times->value[2][0];	dest->value[3][1] = src->value[3][0]*times->value[0][1] + src->value[3][1]*times->value[1][1] + src->value[3][2]*times->value[2][1];	dest->value[3][2] = src->value[3][0]*times->value[0][2] + src->value[3][1]*times->value[1][2] + src->value[3][2]*times->value[2][2];}void MultiplyMatrixToPoint (Point3D *dest, Matrix4x3 *times){	register float tempX, tempY, tempZ;	tempX = dest->x;	tempY = dest->y;	tempZ = dest->z;		dest->x = tempX*times->value[0][0] + tempY*times->value[1][0] + tempZ*times->value[2][0] + times->value[3][0];	dest->y = tempX*times->value[0][1] + tempY*times->value[1][1] + tempZ*times->value[2][1] + times->value[3][1];	dest->z = tempX*times->value[0][2] + tempY*times->value[1][2] + tempZ*times->value[2][2] + times->value[3][2];}