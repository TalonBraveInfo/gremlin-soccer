#include "Frontend Vars.h"#include "Vbl.h"#undef EXTERN#define EXTERN extern#include "Front Variables.h"#include "Palette.h"static long *taskPtr;static VBLTask *theVblVBPtr;void InitVBL( void){OSErr theErr;	theErr = noErr;	taskPtr = NULL;		theVblVBPtr = (VBLTask *)NewPtrSysClear( (long)sizeof(VBLTask));		if( theVblVBPtr)		{		theVblVBPtr->vblAddr = NewVBLProc( ActuaSoccerVBL);		theVblVBPtr->vblCount = 1;		theVblVBPtr->qType = vType;		theVblVBPtr->qLink = NULL;		theVblVBPtr->vblPhase = 0;				theErr = VInstall( (QElemPtr)theVblVBPtr);		}}void EndVBL( void){	if( theVblVBPtr)		{		if( theVblVBPtr->vblAddr)			{			DisposeRoutineDescriptor( (VBLUPP)theVblVBPtr->vblAddr);			theVblVBPtr->vblAddr = NULL;			}		VRemove( (QElemPtr)theVblVBPtr);		DisposePtr( (Ptr)theVblVBPtr);		theVblVBPtr = NULL;		}}Boolean ActuaSoccerVBL(VBLTaskPtr theVBLTask){	theVblVBPtr->vblCount = 1;	++VblTicks;	if( GDVtimer)		GDVtimer--;		if( Timing)		{		count++;	  		ftick+=game_speed;		if( ftick>=TIMER_SPEED)			{			while(ftick>=TIMER_SPEED)				ftick-=TIMER_SPEED;			tick++;			}				if( VblTicks==TicksPerSecond)			{			VblTicks = 0;			FramesPerSecond = Frames;			FramesPerSecondAverage = (FramesPerSecondAverage+FramesPerSecond)/2;			Frames = 0;			}		}	return false;}