#include "Frontend Vars.h"#include "Mallocx.h"#undef EXTERN#define EXTERN extern#define MAX_HANDLES		256static Handle Handles[MAX_HANDLES];static long Sizes[MAX_HANDLES];static long MaxAllocated=0;static long Allocated = 0;static void DumpHeap(){#if MEM_DEBUG==ON	fprintf(DebugFile, "\n\nHeap Dump   -  Max %d (%X)\n", MaxAllocated, MaxAllocated);	for(int i=0; i<MAX_HANDLES; i++)	  if(Handles[i])	    fprintf(DebugFile, "%4d. Allocated %d bytes at %X\n", i, Sizes[i], *Handles[i]);#endif}void OpenDebugFile(void){#if MEM_DEBUG==ON	DebugFile = fopen("Actua Soccer.debug", "w+");	fprintf(DebugFile, "Malloc Debug File For Actua Soccer V1.0 (%s)\n\n",__DATE__);#endif	HeapPurge();}void CloseDebugFile(void){#if MEM_DEBUG==ON	HeapPurge();	DumpHeap();	fclose(DebugFile);#endif}#if MEM_DEBUG==ONvoid HeapReal(char *File, int Line)#elsevoid HeapReal()#endif{long total, contig;	PurgeSpace( &total, &contig);#if MEM_DEBUG==ON	fprintf( DebugFile, "Total Space:%7d   Contig:%7d\n",total, contig);#endif}#if MEM_DEBUG==ONvoid *MallocReal(long Size, char *File, int Line)#elsevoid *MallocReal(long Size)#endif{Handle Hand;int a;#if MEM_DEBUG==ON	fprintf(DebugFile,"Alloced:%7d - Allocating %d bytes for %s (%d)\n", Allocated, Size, File, Line);#endif	Hand = NewHandle( Size); 	if(!Hand)	  {#if MEM_DEBUG==ON	  fprintf(DebugFile, "Allocation Failed\n");#endif	  return NULL;	  }	HLockHi(Hand);	Allocated += Size;	if(Allocated>MaxAllocated)	  MaxAllocated = Allocated;	for(a=0;a<MAX_HANDLES;a++)	  if(Handles[a]==NULL)	    {	    Sizes[a] = Size;	    Handles[a]=Hand;	    break;	    }	return  *Hand;}#if MEM_DEBUG==ONvoid *MarkReal(Handle Hand, long Size, char *File, int Line)#elsevoid *MarkReal(Handle Hand, long Size )#endif{int a;#if MEM_DEBUG==ON	fprintf(DebugFile,"Alloced:%7d - Allocating %d bytes for %s (%d)\n", Allocated, Size, File, Line);#endif	if(!Hand)	  {#if MEM_DEBUG==ON	  fprintf(DebugFile, "Allocation Failed\n");#endif	  return NULL;	  }	Allocated += Size;	if(Allocated>MaxAllocated)	  MaxAllocated = Allocated;	for(a=0;a<MAX_HANDLES;a++)	  if(Handles[a]==NULL)	    {	    Sizes[a] = Size;	    Handles[a]=Hand;	    break;	    }	return  *Hand;}#if MEM_DEBUG==ONvoid FreeReal(void *Address, char *File, int Line)#elsevoid FreeReal(void *Address)#endif{int a;#if MEM_DEBUG==ON	fprintf(DebugFile, "Alloced:%7d - Freeing %X ", Allocated, Address);#endif	for(int a=0; a<MAX_HANDLES; a++)	  if(*Handles[a]==Address)	    {#if MEM_DEBUG==ON		fprintf(DebugFile, "(%d) from %s (%d)\n", Sizes[a], File, Line);#endif		Allocated -= Sizes[a];	    DisposeHandle(Handles[a]);	    Handles[a] = NULL;	    return;	    }#if MEM_DEBUG==ON	  fprintf(DebugFile, " - Could Not Find DeAllocation from %s (%d)\n", File, Line);#endif}Handle MallocGetHandle( void *Address){int i;	for( i=0; i< MAX_HANDLES; i++)	  if( *Handles[i] == Address)	    return Handles[i];	    	return NULL;}#if 0/* Block Allocator */#define BITSTOMEMSIZE		1024static void *BlockAddress;static void *BlockBits;static int  BlockSize;static char BlockLabel=1;static void *BlockFindFree( int Size){void *freeAddress = BlockAddress;void *checkAddress = BlockBits;int counter = 0;int thisBlock;	while( counter < Size)		{		thisBlock = BlockCount( checkAddress, counter);				}	return freeAddress;}void BlockAllocate( int Size){	BlockSize = Size/BITSTOMEMSIZE;	BlockAddress = MallocX( Size);	BlockBits = MallocX( Size / BITSTOMEMSIZE);	memset( BlockBits, 0, Size/BITSTOMEMSIZE);}void BlockDeallocate(){	FreeX( BlockBits);	FreeX( BlockAddress);}void *BlockMalloc( int Size){void *freeAddress;	freeAddress = BlockFindFree( Size);}void BlockFree( void *Address){}#endif