#include "Frontend Vars.h"#include "Process Inputs.h"#undef EXTERN#define EXTERN extern#include "Blitter.h"#include "Front Variables.h"#include "Football.h"#include "Sprocket Input.h"extern Boolean in_quit;		// Football.cextern Boolean Scanner;extern int num_of_users;extern int players;extern char camera;extern volatile char in_game;extern short play_cam;extern short opt_user;extern float set_camera_dist;extern float set_camera_height;extern void change_cam(short cam);#include "3deng.h"static Boolean InputsTog[kElement_COUNT];static void ProcessJoy(short Xelement, short *X, short *Y){OSStatus errorStatus;ISpDPadData joyStick;	errorStatus = ISpElement_GetComplexState( gInputElement[Xelement], sizeof(ISpDPadData), &joyStick);	*X = *Y = 0;	switch( joyStick)		{		case kISpPadIdle:	// Idle				break;		case kISpPadUpLeft:				*Y = -32767;		case kISpPadLeft:				*X = -32767;				break;		case kISpPadUpRight:				*X = 32767;		case kISpPadUp:				*Y = -32767;				break;		case kISpPadDownRight:				*Y = 32767;		case kISpPadRight:				*X = 32767;				break;		case kISpPadDownLeft:				*X = -32767;		case kISpPadDown:				*Y = 32767;				break;		}}static void ProcessJoy2(short Xelement, short Yelement, short *X, short *Y){OSStatus errorStatus;UInt32 xAxis, yAxis;float xAxisFloat,yAxisFloat;	errorStatus = ISpElement_GetSimpleState(gInputElement[Xelement], &xAxis);	errorStatus = ISpElement_GetSimpleState(gInputElement[Yelement], &yAxis);	xAxisFloat = xAxis;	yAxisFloat = yAxis;	xAxisFloat -= kISpAxisMiddle;	xAxisFloat *= -32767.0 / kISpAxisMiddle;	yAxisFloat -= kISpAxisMiddle;	yAxisFloat *= -32767.0 / kISpAxisMiddle;	*X = (int)xAxisFloat;	*Y = (int)yAxisFloat;}void get_user_inputs(void){Boolean wasEvent, Pressed;ISpElementEvent theEvent;	ProcessJoy( kElement_JoyStick1, &Inputs.Player1_X, &Inputs.Player1_Y);	ProcessJoy( kElement_JoyStick2, &Inputs.Player2_X, &Inputs.Player2_Y);//	ProcessJoy( kElement_YAxis1, kElement_XAxis1, &Inputs.Player1_X, &Inputs.Player1_Y);//	ProcessJoy( kElement_XAxis2, kElement_YAxis2, &Inputs.Player2_X, &Inputs.Player2_Y);#if FOURPLAYERS	ProcessJoy( kElement_JoyStick3, &Inputs.Player3_X, &Inputs.Player3_Y);	ProcessJoy( kElement_JoyStick4, &Inputs.Player4_X, &Inputs.Player4_Y);//	ProcessJoy( kElement_YAxis3, kElement_XAxis3, &Inputs.Player3_X, &Inputs.Player3_Y);//	ProcessJoy( kElement_XAxis4, kElement_YAxis4, &Inputs.Player4_X, &Inputs.Player4_Y);#endif	ProcessJoy2(kElement_XView, kElement_YView, &Inputs.View_X, &Inputs.View_Y);	set_camera_dist += Inputs.View_X/8192.0;	if(set_camera_dist<10) set_camera_dist = 10;	if(set_camera_dist>600) set_camera_dist = 600;		set_camera_height += Inputs.View_Y/8192.0;	if(set_camera_height<10) set_camera_height = 10;	if(set_camera_height>600) set_camera_height = 600;	while(1)		{		ISpElementList_GetNextEvent( gInputEventList, sizeof(ISpElementEvent), &theEvent, &wasEvent);		Pressed = theEvent.data == kISpButtonDown;				switch( theEvent.refCon)	    	{	    	case kElement_Shoot1:					Inputs.Player1_S = Pressed;	    			break;			case kElement_Pass1:					Inputs.Player1_P = Pressed;					break;	    	case kElement_Shoot2:					Inputs.Player2_S = Pressed;	    			break;			case kElement_Pass2:					Inputs.Player2_P = Pressed;					break;#if FOURPLAYERS	    	case kElement_Shoot3:					Inputs.Player3_S = Pressed;	    			break;			case kElement_Pass3:					Inputs.Player3_P = Pressed;					break;	    	case kElement_Shoot4:					Inputs.Player4_S = Pressed;	    			break;			case kElement_Pass4:					Inputs.Player4_P = Pressed;					break;#endif			}		if(theEvent.data == kISpButtonDown)	    	{	    	if(InputsTog[theEvent.refCon])	      		switch(theEvent.refCon)	        		{					case kElement_Menu1:								if (num_of_users>=1 && !network_on)									ProcessOptUser( opt_user=1);								else									opt_user=0;								break;					case kElement_Menu2:								if(num_of_users>=2 && !network_on)									ProcessOptUser( opt_user=2);								break;#if FOURPLAYERS					case kElement_Menu3:								if(num_of_users>=3 && !network_on)									ProcessOptUser( opt_user=3);								break;					case kElement_Menu4:								if(num_of_users>=4 && !network_on)									ProcessOptUser( opt_user=4);								break;#endif					case kElement_Camera1:					    		change_cam(0);					    		break;					case kElement_Camera2:					    		change_cam(1);					    		break;					case kElement_Camera3:					    		change_cam(2);					    		break;					case kElement_Camera4:					    		change_cam(3);					    		break;					case kElement_Camera5:								if( num_of_users==1)									change_cam(4);					    		break;					case kElement_Camera6:					    		change_cam(8);					    		break;					case kElement_Camera7:					    		change_cam(7);					    		break;					case kElement_Camera8:					    		change_cam(14);					    		break;					case kElement_Pitch:					    		++setup.detail.pitch%=3;					    		break;					case kElement_Lines:								++setup.detail.lines&=1;								break;					case kElement_Sky:								++setup.detail.sky&=1;								break;					case kElement_Players:								++setup.detail.players&=1;								break;					case kElement_Shadows:								++setup.detail.shadows&=1;								break;					case kElement_Scanner:								Scanner^=1;								break;					case kElement_VidiWall:								match_info.vidi ^= 1;								break;					case kElement_PlayerCameraPlus:								if( camera==4 && (play_cam<players))								  play_cam+=1;								break;					case kElement_PlayerCameraMinus:								if( camera==4 && (play_cam>1))								  play_cam-=1;								break;					case kElement_ChangeScreenSize:#if USERAVEENGINE==YES								if( UseRaveEngine)									setup.screen_size = match_info.size_toggle = 0;								else#endif									{									if( ++match_info.size_toggle == 9)										match_info.size_toggle = 0;									setup.screen_size = match_info.size_toggle;									ClearBuffer();									}								break;					case kElement_ChangeResolution:#if USERAVEENGINE==YES								if( UseRaveEngine)									{									setup.start_res = match_info.res_toggle = true;									BlitterMode = REAL_640400;									main_buff=HIRES_buff;									}								else#endif									{									if(match_info.res_toggle^=1)										{#if USERAVEENGINE==YES										BlitterMode = REAL_640480;#else										BlitterMode = REAL_640400;#endif										main_buff=HIRES_buff;										}									else										{#if USERAVEENGINE==YES										BlitterMode = DOUBLE_320240;#else										BlitterMode = DOUBLE_320200;#endif										main_buff=LORES_buff;										}									setup.start_res = match_info.res_toggle;									ClearBuffer();									}								break;					case kElement_Pause:								if( !network_on)									paused ^= true;								break;					case(kElement_Stop):								in_game = false;								net_error = -1;								break;		    		}				InputsTog[theEvent.refCon] = true;	    		}	  			if(theEvent.data == kISpButtonUp)	    		{	    		if(InputsTog[theEvent.refCon])	      			switch(theEvent.refCon)	        		{	        		}	    		InputsTog[theEvent.refCon]= false;	    		}		  if(!wasEvent)		    {			return;		    }		}}