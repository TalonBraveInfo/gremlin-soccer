#include "Frontend Vars.h"#include "Slot.h"#undef EXTERN#define EXTERN extern#include "Audio.h"#include "FileUtils.h"#include "Front Variables.h"#include "Not Written Yet.h"#define COPY0(X,Y,Z)	memcpy(X, Y, Z)#define COPY1(X,Y,Z)	memcpy(Y, X, Z)			// Reverse Copyvoid GetSLOTinfo(void){	SlotExists = LoadGame(NULL, SlotNumber);}//ษออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป //บ                                                                                                                              บ//บ  write_data_to_slot()                                                                                                        บ//บ																 บ//บ																 บ//บ		Writes current data to a given slot.                                                                             บ//บ																 บ//บ																 บ//ศออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ void	write_data_to_slot(int slot){Handle h;unsigned char *hh;int bitset;int  GRM_LOGO = menu_data[MENU_A8].SpriteTABLE[6].sprite_state;	h = NewHandleClear ( ( sizeof(char) * 20) +						 ( sizeof(char) * 1) +						 ( sizeof(int)  * 1) +						 ( sizeof(team_info) * MAX_TEAMS) +						 ( sizeof(match_data) * 1) +						 ( sizeof(setup_info) * 1) +						 ( sizeof(int) * 1) +						 ( sizeof(int) * 17*2) +						 ( sizeof(int) * (MAX_TEAMS-1)) +						 ( sizeof(int) * (MAX_TEAMS-1)) +						 ( sizeof(result_table) * 650) +						 ( sizeof(batch_data) * 1));						 	HLockHi(h); hh = (unsigned char *)*h;	StopMusic();	SuspendAudio = true;	COPY0(hh, slot_TITLE, 20);								hh += ( sizeof(char) * 20);	COPY0(hh, &version_number, sizeof(char));				hh +=   sizeof(char);	COPY0(hh, &last_menu, sizeof(int));					hh +=   sizeof(int);	COPY0(hh, &game_data, sizeof(team_info) * MAX_TEAMS);	hh += ( sizeof(team_info) * MAX_TEAMS);	COPY0(hh, &match_info, sizeof(match_data));			hh +=   sizeof(match_data);	COPY0(hh, &setup, sizeof(setup_info));					hh +=   sizeof(setup_info);	COPY0(hh, &GRM_LOGO, sizeof(int));						hh +=   sizeof(int) ;	COPY0(hh, &cup_games, sizeof(int) *17*2);				hh += ( sizeof(int) * 17*2);	COPY0(hh, &restore_cup_data, sizeof(int) * (MAX_TEAMS-1)); hh += ( sizeof(int) * (MAX_TEAMS-1));	for (int stringnum = 0; stringnum < MAX_TEAMS-1; stringnum++)	  {	  bitset = (menu_data[MENU_A3].StringLIST[stringnum].string_flags & TOGGLE_FLAG);	  COPY0(hh, &bitset, sizeof(int));						hh +=   sizeof(int);	  }	COPY0(hh, &results, sizeof(result_table) * 650);		hh += ( sizeof(result_table) * 650);	COPY0(hh, &batch_info, sizeof(batch_data));	SaveGame( h, slot);	DisposeHandle(h);	SuspendAudio = false;}//ษออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออป //บ                                                                                                                              บ//บ  load_data_from_slot()                                                                                                       บ//บ																 บ//บ																 บ//บ		Loads data from a given slot into memory.                                                                        บ//บ																 บ//บ																 บ//ศออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออออผ void	load_data_from_slot(int slot){Handle h;int audio	= match_info.audio;int but0	= menu_data[MENU_A14].ButtonLIST[0].button_index;int but1	= menu_data[MENU_A14].ButtonLIST[1].button_index;int but2	= menu_data[MENU_A14].ButtonLIST[2].button_index;int but3	= menu_data[MENU_A14].ButtonLIST[3].button_index;int but4	= menu_data[MENU_A14].ButtonLIST[4].button_index;int bitset, GRM_LOGO;char *hh;int  temp_res	= match_info.menu_res;	h = NewHandleClear ( ( sizeof(char) * 20) +						 ( sizeof(char) * 1) +						 ( sizeof(int)  * 1) +						 ( sizeof(team_info) * MAX_TEAMS) +						 ( sizeof(match_data) * 1) +						 ( sizeof(setup_info) * 1) +						 ( sizeof(int) * 1) +						 ( sizeof(int) * 17*2) +						 ( sizeof(int) * (MAX_TEAMS-1)) +						 ( sizeof(int) * (MAX_TEAMS-1)) +						 ( sizeof(result_table) * 650) +						 ( sizeof(batch_data) * 1));						 	HLockHi(h); hh=*h;	StopMusic();	SuspendAudio = true;	LoadGame( (unsigned char *)*h, slot);	COPY1(hh, slot_TITLE, 20);								hh += ( sizeof(char) * 20);	COPY1(hh, &version_number, sizeof(char));				hh +=   sizeof(char);	COPY1(hh, &new_menu, sizeof(int));						hh +=   sizeof(int);	COPY1(hh, &game_data, sizeof(team_info) * MAX_TEAMS);	hh += ( sizeof(team_info) * MAX_TEAMS);	COPY1(hh, &match_info, sizeof(match_data));				hh +=   sizeof(match_data);	COPY1(hh, &setup, sizeof(setup_info));					hh +=   sizeof(setup_info);	COPY1(hh, &GRM_LOGO, sizeof(int));						hh +=   sizeof(int) ;	COPY1(hh, &cup_games, sizeof(int) *17*2);				hh += ( sizeof(int) * 17*2);	COPY1(hh, &restore_cup_data, sizeof(int) * (MAX_TEAMS-1)); hh += ( sizeof(int) * (MAX_TEAMS-1));	for (int stringnum = 0; stringnum < MAX_TEAMS-1; stringnum++)		{		COPY1(hh, &bitset, sizeof(int));						hh +=   sizeof(int);		menu_data[MENU_A3].StringLIST[stringnum].string_flags&=	65535-TOGGLE_FLAG;		menu_data[MENU_A3].StringLIST[stringnum].string_flags|=	bitset;		}	COPY1(hh, &results, sizeof(result_table) * 650);		hh += ( sizeof(result_table) * 650);	COPY1(hh, &batch_info, sizeof(batch_data));	menu_data[MENU_A8].SpriteTABLE[6].sprite_state 	= GRM_LOGO; 	batch_info.OldCTRL1 				= -1; 	batch_info.OldCTRL2   	  			= -1;	match_info.audio	=	audio;					menu_data[MENU_A14].ButtonLIST[0].button_index	=	 but0;	menu_data[MENU_A14].ButtonLIST[1].button_index	=	 but1;	menu_data[MENU_A14].ButtonLIST[2].button_index	=	 but2;	menu_data[MENU_A14].ButtonLIST[3].button_index	=	 but3;	menu_data[MENU_A14].ButtonLIST[4].button_index	=	 but4;		match_info.menu_res				= temp_res; 	menu_data[MENU_A8].SpriteTABLE[6].sprite_state&=  65535-ACTIVE; 	match_info.crowd	=	menu_data[MENU_A14].ButtonLIST[0].button_index*163;   // this multipication rounds upto 32600. 	match_info.commentary	=	menu_data[MENU_A14].ButtonLIST[1].button_index*163;   // the value should really be 163.835 to 	match_info.master	=	menu_data[MENU_A14].ButtonLIST[2].button_index*163;   // round upto 32767. 	match_info.pitch	=	menu_data[MENU_A14].ButtonLIST[3].button_index*163;	UpdateVolumeLevels();	  				// volume levels should continuously be updated.	SuspendAudio = false;	DisposeHandle(h);}