#include "Frontend Vars.h"#include "Sprite.h"#undef EXTERN#define EXTERN extern#include "Blitter.h"#include "Front Variables.h"#include "Mouse.h"asm void CopySmallLine(BYTE *srcPtr, BYTE *destPtr, short width, short height){	lwz		r3, srcPtr	addi	r3, r3, -2	lwz		r4, destPtr	lhz		r7, height@lpp	addi	r4, r4, -1	lhz		r5, width@lpp1	lbzu	r6, 2(r3)	cmpi	cr0, 0, r6, 0	bne+	@lpp2	lbz		r6, 1(r4)@lpp2	stbu	r6, 1(r4)	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		lhz		r5, width	add		r3, r3, r5	add		r3, r3, r5		lwz		r4, destPtr	addi	r4, r4, 640	stw		r4, destPtr		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void DrawSmallSPRITE(void){BYTE *destPtr = (BYTE *)DisplayDESTINATION + (SpriteXposn) + (SpriteYposn * DisplayWidth);	CopySmallLine( SpriteBITMAP, destPtr, SpriteWIDTH>>1, SpriteHEIGHT>>1);}void DrawSmallSPRITEshadow(void){BYTE *destPtr = (BYTE *)DisplayDESTINATION + (SpriteXposn) + (SpriteYposn * DisplayWidth);}asm void CopyLine(BYTE *srcPtr, BYTE *destPtr, short width, short height){	lwz		r3, srcPtr	addi	r3, r3, -1	lwz		r4, destPtr	lhz		r7, height@lpp	addi	r4, r4, -1	lhz		r5, width@lpp1	lbzu	r6, 1(r3)	cmpi	cr0, 0, r6, 0	bne+	@lpp2	lbz		r6, 1(r4)@lpp2	stbu	r6, 1(r4)	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		lwz		r4, destPtr	addi	r4, r4, 640	stw		r4, destPtr		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void DrawSPRITE(void){BYTE *destPtr = (BYTE *)DisplayDESTINATION + (SpriteXposn) + (SpriteYposn * DisplayWidth);	CopyLine( SpriteBITMAP, destPtr, SpriteWIDTH, SpriteHEIGHT);}asm void CopyLineShadow(BYTE *srcPtr, BYTE *destPtr, short width, short height, BYTE *filter){	lwz		r3, srcPtr	addi	r3, r3, -1	lwz		r4, destPtr	lwz		r8, filter	lhz		r7, height@lpp	lhz		r5, width@lpp1	lbzu	r6, 1(r3)	cmpi	cr0, 0, r6, 0	beq+	@lpp2	lbz		r6, 0(r4)	lbzx	r6, r6, r8	stb		r6, 0(r4)@lpp2	addi	r4, r4, 1	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		lwz		r4, destPtr	addi	r4, r4, 640	stw		r4, destPtr		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void DrawSPRITEshadow(void){BYTE *destPtr = (BYTE *)DisplayDESTINATION + (SpriteXposn + ShadowXoffset) + ((SpriteYposn + ShadowYoffset) * DisplayWidth);	CopyLineShadow( SpriteBITMAP, destPtr, SpriteWIDTH, SpriteHEIGHT, filter_buffer);}asm void CopySaveLine(BYTE *srcPtr, BYTE *destPtr, BYTE *copy, short width, short height){	lwz		r3, srcPtr	addi	r3, r3, -1	lwz		r4, destPtr	lwz		r8, copy	addi	r8, r8, -1		lhz		r7, height@lpp	addi	r4, r4, -1	lhz		r5, width@lpp1	lbz		r6, 1(r4)	stbu	r6, 1(r8)		lbzu	r6, 1(r3)	cmpi	cr0, 0, r6, 0	bne+	@lpp2	lbz		r6, 1(r4)@lpp2	stbu	r6, 1(r4)	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		lwz		r4, destPtr	addi	r4, r4, 640	stw		r4, destPtr		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void DrawMOB(){BYTE *destPtr = DisplayDESTINATION + (SpriteXposn) + (SpriteYposn * DisplayWidth);	if( SpriteYposn+SpriteHEIGHT>479)		SpriteHEIGHT -= (SpriteYposn+SpriteHEIGHT)-479;	CopySaveLine( SpriteBITMAP, destPtr, (BYTE *)&mouseBKGbuffer, SpriteWIDTH, SpriteHEIGHT);}asm void CopyLine2(BYTE *srcPtr, BYTE *destPtr, short width, short height){	lwz		r3, srcPtr	addi	r3, r3, -1	lwz		r4, destPtr	lhz		r7, height@lpp	lhz		r5, width	addi	r4, r4, -1@lpp1	lbzu	r6, 1(r3)	stbu	r6, 1(r4)	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		lwz		r4, destPtr	addi	r4, r4, 640	stw		r4, destPtr		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void ReplaceMOB(){BYTE *destPtr = psudo_buffer + (OldMouseX) + (OldMouseY * DisplayWidth);	if( OldMouseY+OldMouseHeight>479)		OldMouseHeight -= (OldMouseY+OldMouseHeight)-479;			CopyLine2( (BYTE *)&mouseBKGbuffer, destPtr, OldMouseWidth, OldMouseHeight);}asm void FillLine( BYTE *destPtr, short width, short height, short colour){	lwz		r4, destPtr	lhz		r7, height@lpp	lhz		r5, width	addi	r4, r4, -1@lpp1	lbz		r6, 1(r4)	cmpi	cr0, 0, r6, 207	blt		@lpp2	lhz		r6, colour@lpp2	stbu	r6, 1(r4)	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		lwz		r4, destPtr	addi	r4, r4, 640	stw		r4, destPtr		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void FloodAREA(void){BYTE *destPtr = DisplayDESTINATION + (FloodXposn) + (FloodYposn * DisplayWidth);	FillLine( destPtr, FloodWIDTH, FloodHEIGHT, FloodCOLOUR );}asm void CopyLine3(BYTE *srcPtr, BYTE *destPtr, short width, short height){	lwz		r8, srcPtr	lwz		r9, destPtr	lhz		r7, height	addi	r8, r8, -4	addi	r9, r9, -4@lpp	lhz		r5, width	mr		r3, r8	mr		r4, r9@lpp1	lwzu	r6, 4(r3)	stwu	r6, 4(r4)	addi	r5, r5, -1	cmpi	cr0, 0, r5, 0	bne		@lpp1		addi	r8, r8, 640	addi	r9, r9, 640		addi	r7, r7, -1	cmpi	cr0, 0, r7, 0	bne		@lpp	blr}void RestorePSUDObuffer(){BYTE *destPtr, *srcPtr;	CopyWIDTH += CopyXposn&3;	CopyXposn &= 0xfffc;		if( CopyYposn+CopyHEIGHT>479)		CopyHEIGHT -= ((CopyYposn+CopyHEIGHT)-479);	destPtr = DisplayDESTINATION + (CopyXposn) + (CopyYposn * DisplayWidth);	srcPtr = DisplaySOURCE + (CopyXposn) + (CopyYposn * DisplayWidth);	if(CopyWIDTH)		CopyLine3( srcPtr, destPtr, CopyWIDTH>>2, CopyHEIGHT);}