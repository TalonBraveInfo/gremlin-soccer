#include "Frontend Vars.h"#include "Use DrawSprockets.h"#undef EXTERN#define EXTERN extern#include "Blitter.h"#include "Front Variables.h"#include "Palette.h"#include "Vbl.h"//Boolean ActuaSoccerVBL(DSpContextReference theContext, void *inRefCon);static DSpEventProcPtr MyEventHandler( EventRecord *event);////{//	return false;//}void InitDrawSprockets(){theError = DSpStartup();Boolean	bYesNo;#if DEBUGGING==ON	DSpSetDebugMode(true);#endif	memset( &theScreen, 0, sizeof(DSpContextAttributes));	#if DEBUGGING==OFF	theScreen.displayWidth = 640;	theScreen.displayHeight = 480;#else	theScreen.displayWidth = 1024;	theScreen.displayHeight = 768;#endif	theScreen.colorNeeds = kDSpColorNeeds_Require;	#if USERAVEENGINE == YES	theScreen.backBufferDepthMask = kDSpDepthMask_16;	theScreen.displayDepthMask = kDSpDepthMask_16;	theScreen.backBufferBestDepth = 16;	theScreen.displayBestDepth = 16;	theScreen.pageCount = 1;#else	theScreen.backBufferDepthMask = kDSpDepthMask_8;	theScreen.displayDepthMask = kDSpDepthMask_8;	theScreen.backBufferBestDepth = 8;	theScreen.displayBestDepth = 8;	theScreen.pageCount = 1;#endif	theScreen.gameMustConfirmSwitch = false;	theError = DSpCanUserSelectContext( &theScreen, &bYesNo);	if( bYesNo)		theError = DSpUserSelectContext( &theScreen, 0, nil, &theContext);	else		theError = DSpFindBestContext(&theScreen, &theContext);			if( theError == noErr)		{		theError = DSpContext_GetAttributes( theContext, &myRealAttributes );		if( myRealAttributes.displayDepthMask != theScreen.displayDepthMask || !myRealAttributes.colorNeeds)			{#if USERAVEENGINE==YES			Alert( rNeeds32768Colours, nil);#else			Alert( rNeeds256Colours, nil);#endif			ExitToShell();			}		HideCursor();		theError = DSpContext_Reserve(theContext, &theScreen);				Set_palette_to_black();		OpenMyWindow();		theError = DSpContext_SetState(theContext, kDSpContextState_Active);		InitVBL();		}	else		{		if( theError == -30446)			Alert( rNeedsAMonitor, nil);		else			Alert( rNeeds640480, nil);		ExitToShell();		}				}void KillDrawSprockets(){	EndVBL();	#if DEBUGGING==OFF	theError = DSpContext_FadeGammaOut( theContext,NULL);	CloseMyWindow();	theError = DSpContext_SetState(theContext, kDSpContextState_Inactive);	theError = DSpContext_FadeGammaIn( theContext,NULL);#else	theError = DSpContext_SetState(theContext, kDSpContextState_Inactive);#endif	theError = DSpContext_Release(theContext);	theError = DSpShutdown();	ShowCursor();}