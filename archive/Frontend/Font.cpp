#include "Frontend Vars.h"#include "Font.h"#undef EXTERN#define EXTERN extern#include "Front Variables.h"static void ProportionFont(unsigned char chr);int TiltTABLE[]={ 0x3ffff				 ,0x3ffff				 ,0x3feff				 ,0x3bbdd				 ,0x1b6db				 ,0x2aad5				 ,0x2524a				 ,0x04202				 ,0x00000				 ,0x02108				 ,0x0a529				 ,0x16b5a				 ,0x3bbdd				 ,0x3effb				 ,0x3ffff				 };static void ProportionFont(unsigned char chr){unsigned short eax, ebx;	if(ItalicFont==ON)	  {	  eax = ebx = chr;	  if(ebx == ('{'-32))		ebx = 'O'-32;	  else if(ebx == ('|'-32))	    ebx = 'A'-32;	  else if(ebx == ('}'-32))	    ebx = 'o'-32;	  else if(ebx == ('~'-32))	    ebx = 'a'-32;	  if(ebx <= (90-32))		{		eax = LastChar;		if(eax == ('{'-32))		  eax = 'O'-32;		else if(eax == ('|'-32))		  eax = 'A'-32;		else if(eax == ('}'-32))		  eax = 'o'-32;		else if(eax == ('~'-32))		  eax = 'a'-32;				if( eax <= (90-32))		  {		  eax = (eax*(33+26)) + ebx;		  eax = ItalicSpaceTable[eax];		  TextXposn += ((eax>>8) | ((eax&255)<<8));		  }	    }			  }	LastChar = chr;}void ChiselASCchar(unsigned char chr){BYTE *destPtr = DisplayDESTINATION, *d;BYTE *fontPtr = FontDataADDR;BYTE al, fw, fh, fww, c;int	 TiltFLAG;int  ebx, eby;	chr = (chr - 32) &0x7f;	ProportionFont(chr);		destPtr += (DisplayWidth * TextYposn) + TextXposn;	al = fontPtr[chr+2];	fw = fontPtr[0];	fh = fontPtr[1];	fontPtr += ( fw*fh*chr) + (2+95);	TiltFLAG = TiltTABLE[TiltFRAME/4];	ebx = TextureOffset;		while(fh--)		{		fww = fw;		eby = ebx;		d = destPtr;		while(fww--)			{			c = *fontPtr++;			if(TiltFLAG&0x1 && c)				{				d[0] = TextureSOURCE[ebx];				d[1] = d[DisplayWidth] = 4;				}			d++;			ebx++;			}		if(TiltFLAG&0x1)		  destPtr += DisplayWidth;		ebx = eby+336;		TiltFLAG>>=1;		}			TextXposn += al;	TextureOffset += al;}void DisplayASCchar(unsigned char chr){BYTE *destPtr = DisplayDESTINATION, *d;BYTE *fontPtr = FontDataADDR;BYTE al, fw, fh, fww, c;	chr = (chr - 32) &0x7f;	ProportionFont(chr);	destPtr += (DisplayWidth * TextYposn) + TextXposn;	al = fontPtr[chr+2];	fw = fontPtr[0];	fh = fontPtr[1];	fontPtr += ( fw*fh*chr) + (2+95);	while(fh--)		{		fww = fw;		d = destPtr;		while(fww--)			{			c = *fontPtr++;			if(c)				{				if(c==0xff)				  c = TextCOLOUR;				*d++ = c;				}			else			 	d++;			 }		destPtr += DisplayWidth;		}			TextXposn += al;}void DisplayASCcharShadow(unsigned char c){	c-=32;}void get_string_length(unsigned char chr){short bp = TextXposn;	chr = (chr-32)&0x7f;	TextXposn = StringLength;	if( ItalicFont==ON && ActuaMEMflag&0x0001)	  ProportionFont(chr);	StringLength = FontDataADDR[chr + 2] + TextXposn;	if(!(ActuaMEMflag&0x0001) && (ItalicFont==ON))	  StringLength++;	TextXposn = bp;}