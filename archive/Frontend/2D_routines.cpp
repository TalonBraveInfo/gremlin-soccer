#include "Andys Vars.h"#include "2D_routines.h"#undef EXTERN#define EXTERN extern#include "Blitter.h"static int Colour;static int PlotAction = _GPSET;static int X0, Y0, TextX, TextY;extern BYTE *psudo_buffer;void Plotxy(int X0, int Y0){BYTE *scr = (BYTE *)screenptr;//	Y0 = 399-Y0;//	X0 = 639-X0;			if( X0<0 || X0>640 || Y0<0 || Y0>400)		return;			scr += X0;	scr += (Y0 * 640);		if(PlotAction==_GXOR)	  *scr ^= Colour;	else	  *scr = Colour;}void _moveto(int x, int y){	X0 = x;	Y0 = y;}static void Swap(int *X, int *Y){int Temp;	Temp = *X;	*X = *Y;	*Y = Temp;}static void Octant0(unsigned int X0, unsigned int Y0, unsigned int DeltaX, unsigned int DeltaY, int Xdir){int DeltaYx2;int DeltaYx2MinusDeltaXx2;int ErrorTerm;	DeltaYx2 = DeltaY*2;	DeltaYx2MinusDeltaXx2 = DeltaYx2 - (int)(DeltaX *2);	ErrorTerm = DeltaYx2 - (int)DeltaX;		while(DeltaX--)	  {	  Plotxy(X0,Y0);	  if(ErrorTerm>=0)	    {	    Y0++;	    ErrorTerm += DeltaYx2MinusDeltaXx2;	    }	  else	    {	    ErrorTerm += DeltaYx2;	    }	  X0 += Xdir;	  }}static void Octant1(int X0, int Y0, int DeltaX, int DeltaY, int Xdir){int DeltaXx2;int DeltaXx2MinusDeltaYx2;int ErrorTerm;	DeltaXx2 = DeltaX*2;	DeltaXx2MinusDeltaYx2 = DeltaXx2 - (int)(DeltaY *2);	ErrorTerm = DeltaXx2 - (int)DeltaY;		while(DeltaY--)	  {	  Plotxy(X0,Y0);	  if(ErrorTerm>=0)	    {	    X0 += Xdir;	    ErrorTerm += DeltaXx2MinusDeltaYx2;	    }	  else	    {	    ErrorTerm += DeltaXx2;	    }	  Y0 ++;	  }}void _lineto(int X1, int Y1){int DeltaX, DeltaY;int X2 = X1, Y2 = Y1;	if(Y0>Y1)	  {	  Swap(&X0,&X1);	  Swap(&Y0,&Y1);	  }	  	DeltaX = X1-X0;	DeltaY = Y1-Y0;	if(DeltaX > 0)	  {	  if(DeltaX > DeltaY)	    Octant0( X0, Y0, DeltaX, DeltaY, 1);	  else	    Octant1( X0, Y0, DeltaX, DeltaY, 1);	  }	else	  {	  DeltaX = -DeltaX;	  if(DeltaX > DeltaY)	    Octant0( X0, Y0, DeltaX, DeltaY, -1);	  else	    Octant1( X0, Y0, DeltaX, DeltaY, -1); 	  }	 X0 = X2;	 Y0 = Y2;}void _setcolor(int col){	Colour = col;}int _getcolor(void){	return Colour;}int _getplotaction(void){	return PlotAction;}void _setplotaction(int flag){	PlotAction = flag;}void _ellipse(int flag, int x, int y, int xr, int yr){}void delay(int delay){int ticks=TickCount();	while((ticks+(delay/10))> TickCount())	  ;}void _setpixel(int x,int y){	Plotxy(x,y);}void _outgtext(char *str){}void _outtext(char *str){}void _settextposition(int x,int y){	TextX = x;	TextY = y;}